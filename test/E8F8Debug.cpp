#include "../src/Board.h"
#include "../src/MoveGenerator.h"
#include "../src/MoveEncoding.h"
#include <iostream>

int main() {
    std::string fen = "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1";
    Board board;
    board.loadFEN(fen);
    
    std::cout << "=== TESTING e5-d7 CAPTURE ===\n";
    
    // Make the problematic move e5-d7
    Board::MoveState state;
    board.makeMove("e5-d7", state);
    
    std::cout << "After e5-d7 (black to move):\n";
    
    // Check what's on d7 and what the knight captured
    uint64_t allPieces = board.getWhitePieces() | board.getBlackPieces();
    std::cout << "  d7 occupied: " << ((allPieces & (1ULL << 51)) ? "YES" : "NO") << "\n";
    std::cout << "  White knight on d7: " << ((board.getWhiteKnights() & (1ULL << 51)) ? "YES" : "NO") << "\n";
    
    // Check if e8-f8 is a valid king move (should be illegal if f8 is under attack)
    std::cout << "  e8-f8 legal: " << board.isMoveLegal("e8-f8") << "\n";
    
    // Check if f8 is under attack by white
    MoveGenerator gen;
    std::cout << "  f8 attacked by white: " << gen.isSquareAttacked(board, 61, true) << "\n";
    
    // Check what white pieces can attack f8
    std::cout << "  White queen on f3: " << ((board.getWhiteQueens() & (1ULL << 21)) ? "YES" : "NO") << "\n";
    
    // Generate all legal black moves to see if e8-f8 is included
    auto moves = gen.generateAllMoves(board, false);
    bool e8f8Generated = false;
    for (auto move : moves) {
        std::string moveStr = decodeMove(move);
        if (moveStr == "e8-f8") {
            e8f8Generated = true;
            break;
        }
    }
    std::cout << "  e8-f8 generated by MoveGenerator: " << (e8f8Generated ? "YES" : "NO") << "\n";
    
    return 0;
}
